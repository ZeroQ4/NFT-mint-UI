{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\NFT-mint-UI\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport { ConnectionProvider, WalletProvider } from \"@solana/wallet-adapter-react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { getPhantomWallet, getSlopeWallet, getSolflareWallet, getSolflareWebWallet, getSolletWallet, getSolletExtensionWallet, getSolongWallet, getLedgerWallet, getSafePalWallet } from \"@solana/wallet-adapter-wallets\";\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport \"./App.css\";\nimport { DEFAULT_TIMEOUT } from './connection';\nimport Home from \"./Home\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nconst getCandyMachineId = () => {\n  try {\n    const candyMachineId = new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID);\n    return candyMachineId;\n  } catch (e) {\n    console.log('Failed to construct CandyMachineId', e);\n    return undefined;\n  }\n};\n\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\nconst connection = new anchor.web3.Connection(rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'));\nconst theme = createTheme({\n  palette: {\n    type: 'dark'\n  },\n  overrides: {\n    MuiButtonBase: {\n      root: {\n        justifyContent: 'flex-start'\n      }\n    },\n    MuiButton: {\n      root: {\n        textTransform: undefined,\n        padding: '12px 16px'\n      },\n      startIcon: {\n        marginRight: 8\n      },\n      endIcon: {\n        marginLeft: 8\n      }\n    }\n  }\n});\n\nconst App = () => {\n  _s();\n\n  // Custom RPC endpoint.\n  const endpoint = useMemo(() => clusterApiUrl(network), []); // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\n  // Only the wallets you configure here will be compiled into your application, and only the dependencies\n  // of wallets that your users connect to will be loaded.\n\n  const wallets = useMemo(() => [getPhantomWallet(), getSlopeWallet(), getSolflareWallet(), getSolflareWebWallet(), getSolletWallet({\n    network\n  }), getSolletExtensionWallet({\n    network\n  }), getSolongWallet(), getLedgerWallet(), getSafePalWallet()], []);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n      endpoint: endpoint,\n      children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n        wallets: wallets,\n        autoConnect: true,\n        children: /*#__PURE__*/_jsxDEV(WalletModalProvider, {\n          children: /*#__PURE__*/_jsxDEV(Home, {\n            candyMachineId: candyMachineId,\n            connection: connection,\n            txTimeout: DEFAULT_TIMEOUT,\n            rpcHost: rpcHost,\n            network: network\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"RNaTq20PjYTGasfEtgZ8qKkPMD0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/GitHub/NFT-mint-UI/src/App.tsx"],"names":["createTheme","ThemeProvider","useMemo","ConnectionProvider","WalletProvider","anchor","clusterApiUrl","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolflareWebWallet","getSolletWallet","getSolletExtensionWallet","getSolongWallet","getLedgerWallet","getSafePalWallet","WalletModalProvider","DEFAULT_TIMEOUT","Home","require","getCandyMachineId","candyMachineId","web3","PublicKey","process","env","REACT_APP_CANDY_MACHINE_ID","e","console","log","undefined","network","REACT_APP_SOLANA_NETWORK","rpcHost","REACT_APP_SOLANA_RPC_HOST","connection","Connection","theme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","wallets"],"mappings":"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","sourcesContent":["import { createTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n    ConnectionProvider,\r\n    WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n    getPhantomWallet,\r\n    getSlopeWallet,\r\n    getSolflareWallet,\r\n    getSolflareWebWallet,\r\n    getSolletWallet,\r\n    getSolletExtensionWallet,\r\n    getSolongWallet,\r\n    getLedgerWallet,\r\n    getSafePalWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n    WalletModalProvider\r\n} from '@solana/wallet-adapter-react-ui';\r\n\r\nimport \"./App.css\";\r\nimport { DEFAULT_TIMEOUT } from './connection';\r\nimport Home from \"./Home\";\r\n\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n    try {\r\n        const candyMachineId = new anchor.web3.PublicKey(\r\n            process.env.REACT_APP_CANDY_MACHINE_ID!,\r\n        );\r\n\r\n        return candyMachineId;\r\n    } catch (e) {\r\n        console.log('Failed to construct CandyMachineId', e);\r\n        return undefined;\r\n    }\r\n};\r\n\r\nconst candyMachineId = getCandyMachineId();\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\n\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(\r\n    rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\r\n);\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        type: 'dark',\r\n    },\r\n    overrides: {\r\n        MuiButtonBase: {\r\n            root: {\r\n                justifyContent: 'flex-start',\r\n            },\r\n        },\r\n        MuiButton: {\r\n            root: {\r\n                textTransform: undefined,\r\n                padding: '12px 16px',\r\n            },\r\n            startIcon: {\r\n                marginRight: 8,\r\n            },\r\n            endIcon: {\r\n                marginLeft: 8,\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nconst App = () => {\r\n    // Custom RPC endpoint.\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\r\n    // Only the wallets you configure here will be compiled into your application, and only the dependencies\r\n    // of wallets that your users connect to will be loaded.\r\n    const wallets = useMemo(\r\n        () => [\r\n            getPhantomWallet(),\r\n            getSlopeWallet(),\r\n            getSolflareWallet(),\r\n            getSolflareWebWallet(),\r\n            getSolletWallet({ network }),\r\n            getSolletExtensionWallet({ network }),\r\n            getSolongWallet(),\r\n            getLedgerWallet(),\r\n            getSafePalWallet(),\r\n        ],\r\n        []\r\n    );\r\n\r\n  return (\r\n      <ThemeProvider theme={theme}>\r\n        <ConnectionProvider endpoint={endpoint}>\r\n          <WalletProvider wallets={wallets} autoConnect={true}>\r\n            <WalletModalProvider>\r\n              <Home\r\n                candyMachineId={candyMachineId}\r\n                connection={connection}\r\n                txTimeout={DEFAULT_TIMEOUT}\r\n                rpcHost={rpcHost}\r\n                network={network}\r\n              />\r\n            </WalletModalProvider>\r\n          </WalletProvider>\r\n        </ConnectionProvider>\r\n      </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}