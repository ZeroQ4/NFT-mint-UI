{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = require(\"react\");\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst useWallet = (wallet, {\n  refreshTimeoutId\n}, dispatch) => {\n  /**\n   * detect a wallet disconnecting and dispatch an event\n   */\n  (0, react_1.useEffect)(() => {\n    if (!wallet || !wallet.publicKey) {\n      logger_1.default.debug('wallet disconnected');\n\n      if (refreshTimeoutId) {\n        logger_1.default.debug('useEffect cleartimeout', refreshTimeoutId);\n        clearTimeout(refreshTimeoutId);\n        dispatch({\n          type: 'refresh_clear_timeout'\n        });\n      }\n\n      dispatch({\n        type: 'walletDisconnected'\n      });\n    }\n  }, [wallet === null || wallet === void 0 ? void 0 : wallet.publicKey, refreshTimeoutId]);\n  /**\n   * expect a connected wallet, throw an error if a vald wallet isn't in state\n   */\n\n  const expectWalletConnected = (0, react_1.useCallback)(() => {\n    logger_1.default.debug('expectWalletConnected', wallet);\n\n    if (!wallet || !wallet.publicKey) {\n      throw new Error('No wallet connnected');\n    }\n\n    return wallet;\n  }, [wallet]);\n  return {\n    expectWalletConnected\n  };\n};\n\nexports.default = useWallet;","map":{"version":3,"sources":["D:/GitHub/NFT-mint-UI/node_modules/@civic/common-gateway-react/dist/esm/useHooks/useWalletHooks.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","react_1","require","logger_1","useWallet","wallet","refreshTimeoutId","dispatch","useEffect","publicKey","default","debug","clearTimeout","type","expectWalletConnected","useCallback","Error"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,QAAQ,GAAGT,eAAe,CAACQ,OAAO,CAAC,WAAD,CAAR,CAAhC;;AACA,MAAME,SAAS,GAAG,CAACC,MAAD,EAAS;AAAEC,EAAAA;AAAF,CAAT,EAA+BC,QAA/B,KAA4C;AAC1D;AACJ;AACA;AACI,GAAC,GAAGN,OAAO,CAACO,SAAZ,EAAuB,MAAM;AACzB,QAAI,CAACH,MAAD,IAAW,CAACA,MAAM,CAACI,SAAvB,EAAkC;AAC9BN,MAAAA,QAAQ,CAACO,OAAT,CAAiBC,KAAjB,CAAuB,qBAAvB;;AACA,UAAIL,gBAAJ,EAAsB;AAClBH,QAAAA,QAAQ,CAACO,OAAT,CAAiBC,KAAjB,CAAuB,wBAAvB,EAAiDL,gBAAjD;AACAM,QAAAA,YAAY,CAACN,gBAAD,CAAZ;AACAC,QAAAA,QAAQ,CAAC;AAAEM,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAR;AACH;;AACDN,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACH;AACJ,GAVD,EAUG,CAACR,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACI,SAAxD,EAAmEH,gBAAnE,CAVH;AAWA;AACJ;AACA;;AACI,QAAMQ,qBAAqB,GAAG,CAAC,GAAGb,OAAO,CAACc,WAAZ,EAAyB,MAAM;AACzDZ,IAAAA,QAAQ,CAACO,OAAT,CAAiBC,KAAjB,CAAuB,uBAAvB,EAAgDN,MAAhD;;AACA,QAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACI,SAAvB,EAAkC;AAC9B,YAAM,IAAIO,KAAJ,CAAU,sBAAV,CAAN;AACH;;AACD,WAAOX,MAAP;AACH,GAN6B,EAM3B,CAACA,MAAD,CAN2B,CAA9B;AAOA,SAAO;AACHS,IAAAA;AADG,GAAP;AAGH,CA5BD;;AA6BAf,OAAO,CAACW,OAAR,GAAkBN,SAAlB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = require(\"react\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst useWallet = (wallet, { refreshTimeoutId }, dispatch) => {\n    /**\n     * detect a wallet disconnecting and dispatch an event\n     */\n    (0, react_1.useEffect)(() => {\n        if (!wallet || !wallet.publicKey) {\n            logger_1.default.debug('wallet disconnected');\n            if (refreshTimeoutId) {\n                logger_1.default.debug('useEffect cleartimeout', refreshTimeoutId);\n                clearTimeout(refreshTimeoutId);\n                dispatch({ type: 'refresh_clear_timeout' });\n            }\n            dispatch({ type: 'walletDisconnected' });\n        }\n    }, [wallet === null || wallet === void 0 ? void 0 : wallet.publicKey, refreshTimeoutId]);\n    /**\n     * expect a connected wallet, throw an error if a vald wallet isn't in state\n     */\n    const expectWalletConnected = (0, react_1.useCallback)(() => {\n        logger_1.default.debug('expectWalletConnected', wallet);\n        if (!wallet || !wallet.publicKey) {\n            throw new Error('No wallet connnected');\n        }\n        return wallet;\n    }, [wallet]);\n    return {\n        expectWalletConnected,\n    };\n};\nexports.default = useWallet;\n"]},"metadata":{},"sourceType":"script"}