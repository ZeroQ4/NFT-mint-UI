{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\NFT-mint-UI\\\\src\\\\Home.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport confetti from \"canvas-confetti\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletMultiButton } from \"@solana/wallet-adapter-react-ui\";\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport Countdown from \"react-countdown\";\nimport { Snackbar, Paper, Chip } from \"@material-ui/core\";\nimport { getAtaForMint, toDate } from \"./utils\";\nimport { MintButton } from \"./MintButton\";\nimport { awaitTransactionSignatureConfirmation, CANDY_MACHINE_PROGRAM, createAccountsForMint, getCandyMachineState, getCollectionPDA, mintOneToken } from \"./candy-machine\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK.toString();\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS.toString() : 9;\nconst splTokenName = process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME ? process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME.toString() : \"TOKEN\";\nconst WalletContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  background: black;\n  padding: 0.6em;\n  background: #0c0c22bf;\n  z-index: 1;\n`;\n_c = WalletContainer;\nconst Logo = styled.div`\n  padding\n  display: flex;\n  -webkit-flex-direction: row;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n  -ms-flex-pack: center;\n  justify-content: space-between !important;\n\n  overflow: hidden;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  z-index:1;\n`;\n_c2 = Logo;\nconst WalletAmount = styled.div`\n  color: black;\n  width: auto;\n  padding: 5px 5px 5px 16px;\n  min-width: 48px;\n  min-height: auto;\n  border-radius: 44px;\n  background-color: var(--main-text-color);\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%),\n    0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\n  box-sizing: border-box;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n    border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  font-weight: 500;\n  line-height: 1.75;\n  text-transform: uppercase;\n  border: 0;\n  margin: 0;\n  display: inline-flex;\n  outline: 0;\n  position: relative;\n  align-items: center;\n  user-select: none;\n  vertical-align: middle;\n  justify-content: flex-start;\n  gap: 10px;\n`;\n_c3 = WalletAmount;\nconst Wallet = styled.ul`\n  flex: 0 0 auto;\n  padding: 0;\n  margin-right: 3.5em !important;\n  margin: 0px;\n  justify-content: right;\n`;\n_c4 = Wallet;\nconst ConnectButton = styled(WalletMultiButton)`\n  border-radius: 44px !important;\n  padding: 6px 16px;\n  background-color: #00b7fc;\n  margin: 0 auto;\n`;\n_c5 = ConnectButton;\nconst NFT = styled(Paper)`\n  min-width: 32em !important;\n  margin: 0 auto;\n  padding: 5px 20px 20px 20px;\n  flex: 1 1 auto;\n  background-color: var(--card-background-color) !important;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22) !important;\n  margin-top: 6em;\n`;\n_c6 = NFT;\nconst Card = styled(Paper)`\n  display: inline-block;\n  background-color: var(--countdown-background-color) !important;\n  margin: 5px;\n  min-width: 40px;\n  padding: 24px;\n  h1 {\n    margin: 0px;\n  }\n`;\n_c7 = Card;\nconst MintButtonContainer = styled.div`\n  button.MuiButton-contained:not(.MuiButton-containedPrimary) {\n    color: #fff;\n    border-radius: 44px;\n    width: 250px;\n  }\n\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\n    -webkit-animation: pulse 1s;\n    animation: pulse 1s;\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\n  }\n\n  @-webkit-keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n\n  @keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n`;\n_c8 = MintButtonContainer;\nconst Menu = styled.ul`\n  list-style: none;\n  display: relative;\n  flex: 1 0 auto;\n  margin: 0px;\n`;\n_c9 = Menu;\nconst SolExplorerLink = styled.a`\n  color: var(--title-text-color);\n  border-bottom: 1px solid var(--title-text-color);\n  font-weight: bold;\n  list-style-image: none;\n  list-style-position: outside;\n  list-style-type: none;\n  outline: none;\n  text-decoration: none;\n  text-size-adjust: 100%;\n\n  :hover {\n    border-bottom: 2px solid var(--title-text-color);\n  }\n`;\n_c10 = SolExplorerLink;\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n\n  text-align: center;\n  justify-content: center;\n`;\n_c11 = MainContainer;\nconst MintContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1 1 auto;\n  flex-wrap: wrap;\n  gap: 20px;\n  z-index: 1;\n`;\n_c12 = MintContainer;\nconst DesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  gap: 20px;\n`;\n_c13 = DesContainer;\nconst Price = styled(Chip)`\n  position: absolute;\n  margin: 5px;\n  font-weight: bold;\n  font-size: 1.2em !important;\n  font-family: \"Patrick Hand\", cursive !important;\n`;\n_c14 = Price;\n\nconst Home = props => {\n  _s();\n\n  var _candyMachine$state, _candyMachine$state$e, _candyMachine$state2, _candyMachine$state2$;\n\n  const [balance, setBalance] = useState();\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\n\n  const [solanaExplorerLink, setSolanaExplorerLink] = useState(\"\");\n  const [itemsAvailable, setItemsAvailable] = useState(0);\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n  const [isSoldOut, setIsSoldOut] = useState(false);\n  const [payWithSplToken, setPayWithSplToken] = useState(false);\n  const [price, setPrice] = useState(0);\n  const [priceLabel, setPriceLabel] = useState(\"SOL\");\n  const [whitelistPrice, setWhitelistPrice] = useState(0);\n  const [whitelistEnabled, setWhitelistEnabled] = useState(false);\n  const [isBurnToken, setIsBurnToken] = useState(false);\n  const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\n  const [isEnded, setIsEnded] = useState(false);\n  const [endDate, setEndDate] = useState();\n  const [isPresale, setIsPresale] = useState(false);\n  const [isWLOnly, setIsWLOnly] = useState(false);\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: \"\",\n    severity: undefined\n  });\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState();\n  const wallet = useWallet();\n  const [candyMachine, setCandyMachine] = useState();\n  const rpcUrl = props.rpcHost;\n  const solFeesEstimation = 0.012; // approx of account creation fees\n\n  const anchorWallet = useMemo(() => {\n    if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction\n    };\n  }, [wallet]);\n  const refreshCandyMachineState = useCallback(async (commitment = \"confirmed\") => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    const connection = new Connection(props.rpcHost, commitment);\n\n    if (props.candyMachineId) {\n      try {\n        var _cndy$state$endSettin, _cndy$state$endSettin2, _cndy$state$whitelist3, _cndy$state$whitelist4, _cndy$state$gatekeepe;\n\n        const cndy = await getCandyMachineState(anchorWallet, props.candyMachineId, connection);\n        setCandyMachine(cndy);\n        setItemsAvailable(cndy.state.itemsAvailable);\n        setItemsRemaining(cndy.state.itemsRemaining);\n        setItemsRedeemed(cndy.state.itemsRedeemed);\n        var divider = 1;\n\n        if (decimals) {\n          divider = +(\"1\" + new Array(decimals).join(\"0\").slice() + \"0\");\n        } // detect if using spl-token to mint\n\n\n        if (cndy.state.tokenMint) {\n          setPayWithSplToken(true); // Customize your SPL-TOKEN Label HERE\n          // TODO: get spl-token metadata name\n\n          setPriceLabel(splTokenName);\n          setPrice(cndy.state.price.toNumber() / divider);\n          setWhitelistPrice(cndy.state.price.toNumber() / divider);\n        } else {\n          setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n          setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n        } // fetch whitelist token balance\n\n\n        if (cndy.state.whitelistMintSettings) {\n          setWhitelistEnabled(true);\n          setIsBurnToken(cndy.state.whitelistMintSettings.mode.burnEveryTime);\n          setIsPresale(cndy.state.whitelistMintSettings.presale);\n          setIsWLOnly(!isPresale && cndy.state.whitelistMintSettings.discountPrice === null);\n\n          if (cndy.state.whitelistMintSettings.discountPrice !== null && cndy.state.whitelistMintSettings.discountPrice !== cndy.state.price) {\n            if (cndy.state.tokenMint) {\n              var _cndy$state$whitelist;\n\n              setWhitelistPrice(((_cndy$state$whitelist = cndy.state.whitelistMintSettings.discountPrice) === null || _cndy$state$whitelist === void 0 ? void 0 : _cndy$state$whitelist.toNumber()) / divider);\n            } else {\n              var _cndy$state$whitelist2;\n\n              setWhitelistPrice(((_cndy$state$whitelist2 = cndy.state.whitelistMintSettings.discountPrice) === null || _cndy$state$whitelist2 === void 0 ? void 0 : _cndy$state$whitelist2.toNumber()) / LAMPORTS_PER_SOL);\n            }\n          }\n\n          let balance = 0;\n\n          try {\n            var _tokenBalance$value;\n\n            const tokenBalance = await props.connection.getTokenAccountBalance((await getAtaForMint(cndy.state.whitelistMintSettings.mint, anchorWallet.publicKey))[0]);\n            balance = (tokenBalance === null || tokenBalance === void 0 ? void 0 : (_tokenBalance$value = tokenBalance.value) === null || _tokenBalance$value === void 0 ? void 0 : _tokenBalance$value.uiAmount) || 0;\n          } catch (e) {\n            console.error(e);\n            balance = 0;\n          }\n\n          if (commitment !== \"processed\") {\n            setWhitelistTokenBalance(balance);\n          }\n\n          setIsActive(isPresale && !isEnded && balance > 0);\n        } else {\n          setWhitelistEnabled(false);\n        } // end the mint when date is reached\n\n\n        if (cndy === null || cndy === void 0 ? void 0 : (_cndy$state$endSettin = cndy.state.endSettings) === null || _cndy$state$endSettin === void 0 ? void 0 : _cndy$state$endSettin.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n\n          if (cndy.state.endSettings.number.toNumber() < new Date().getTime() / 1000) {\n            setIsEnded(true);\n            setIsActive(false);\n          }\n        } // end the mint when amount is reached\n\n\n        if (cndy === null || cndy === void 0 ? void 0 : (_cndy$state$endSettin2 = cndy.state.endSettings) === null || _cndy$state$endSettin2 === void 0 ? void 0 : _cndy$state$endSettin2.endSettingType.amount) {\n          let limit = Math.min(cndy.state.endSettings.number.toNumber(), cndy.state.itemsAvailable);\n          setItemsAvailable(limit);\n\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n            setIsEnded(true);\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          setIsActive(false);\n        }\n\n        const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n        const collectionPDAAccount = await connection.getAccountInfo(collectionPDA);\n        const txnEstimate = 892 + (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) + (cndy.state.tokenMint ? 66 : 0) + (cndy.state.whitelistMintSettings ? 34 : 0) + (((_cndy$state$whitelist3 = cndy.state.whitelistMintSettings) === null || _cndy$state$whitelist3 === void 0 ? void 0 : (_cndy$state$whitelist4 = _cndy$state$whitelist3.mode) === null || _cndy$state$whitelist4 === void 0 ? void 0 : _cndy$state$whitelist4.burnEveryTime) ? 34 : 0) + (cndy.state.gatekeeper ? 33 : 0) + (((_cndy$state$gatekeepe = cndy.state.gatekeeper) === null || _cndy$state$gatekeepe === void 0 ? void 0 : _cndy$state$gatekeepe.expireOnUse) ? 66 : 0);\n        setNeedTxnSplit(txnEstimate > 1230);\n      } catch (e) {\n        if (e instanceof Error) {\n          if (e.message === `Account does not exist ${props.candyMachineId}`) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n              severity: \"error\",\n              hideDuration: null\n            });\n          } else if (e.message.startsWith(\"failed to get info about account\")) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n              severity: \"error\",\n              hideDuration: null\n            });\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: `${e}`,\n            severity: \"error\",\n            hideDuration: null\n          });\n        }\n\n        console.log(e);\n      }\n    } else {\n      setAlertState({\n        open: true,\n        message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n        severity: \"error\",\n        hideDuration: null\n      });\n    }\n  }, [anchorWallet, props.candyMachineId, props.rpcHost, isEnded, isPresale, props.connection]);\n\n  const renderGoLiveDateCounter = ({\n    days,\n    hours,\n    minutes,\n    seconds\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        elevation: 1,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: days\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 11\n        }, this), \"Days\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        elevation: 1,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: hours\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this), \"Hours\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        elevation: 1,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: minutes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 11\n        }, this), \"Mins\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        elevation: 1,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: seconds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this), \"Secs\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderEndDateCounter = ({\n    days,\n    hours,\n    minutes\n  }) => {\n    let label = \"\";\n\n    if (days > 0) {\n      label += days + \" days \";\n    }\n\n    if (hours > 0) {\n      label += hours + \" hours \";\n    }\n\n    label += minutes + 1 + \" minutes left to MINT.\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }, this);\n  };\n\n  function displaySuccess(mintPublicKey, qty = 1) {\n    let remaining = itemsRemaining - qty;\n    setItemsRemaining(remaining);\n    setIsSoldOut(remaining === 0);\n\n    if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\n      let balance = whitelistTokenBalance - qty;\n      setWhitelistTokenBalance(balance);\n      setIsActive(isPresale && !isEnded && balance > 0);\n    }\n\n    setSetupTxn(undefined);\n    setItemsRedeemed(itemsRedeemed + qty);\n\n    if (!payWithSplToken && balance && balance > 0) {\n      setBalance(balance - (whitelistEnabled ? whitelistPrice : price) * qty - solFeesEstimation);\n    }\n\n    setSolanaExplorerLink(cluster === \"devnet\" || cluster === \"testnet\" ? \"https://solscan.io/token/\" + mintPublicKey + \"?cluster=\" + cluster : \"https://solscan.io/token/\" + mintPublicKey);\n    setIsMinting(false);\n    throwConfetti();\n  }\n\n  function throwConfetti() {\n    confetti({\n      particleCount: 400,\n      spread: 70,\n      origin: {\n        y: 0.6\n      }\n    });\n  }\n\n  const onMint = async (beforeTransactions = [], afterTransactions = []) => {\n    try {\n      if (wallet.connected && (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.program) && wallet.publicKey) {\n        var _setupMint, _setupState$mint;\n\n        setIsMinting(true);\n        let setupMint;\n\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: \"Please validate account setup transaction\",\n            severity: \"info\"\n          });\n          setupMint = await createAccountsForMint(candyMachine, wallet.publicKey);\n          let status = {\n            err: true\n          };\n\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(setupMint.transaction, props.txTimeout, props.connection, true);\n          }\n\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message: \"Setup transaction succeeded! You can now validate mint transaction\",\n              severity: \"info\"\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: \"Mint failed! Please try again!\",\n              severity: \"error\"\n            });\n            return;\n          }\n        }\n\n        const setupState = (_setupMint = setupMint) !== null && _setupMint !== void 0 ? _setupMint : setupTxn;\n        const mint = (_setupState$mint = setupState === null || setupState === void 0 ? void 0 : setupState.mint) !== null && _setupState$mint !== void 0 ? _setupState$mint : anchor.web3.Keypair.generate();\n        let mintResult = await mintOneToken(candyMachine, wallet.publicKey, mint, beforeTransactions, afterTransactions, setupState);\n        let status = {\n          err: true\n        };\n        let metadataStatus = null;\n\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(mintResult.mintTxId, props.txTimeout, props.connection, true);\n          metadataStatus = await candyMachine.program.provider.connection.getAccountInfo(mintResult.metadataKey, \"processed\");\n          console.log(\"Metadata status: \", !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\"\n          }); // update front-end amounts\n\n          displaySuccess(mint.publicKey);\n          refreshCandyMachineState(\"processed\");\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message: \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\n            severity: \"error\",\n            hideDuration: 8000\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\"\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction Timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x138\")) {} else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\"\n      });\n    } finally {\n      setIsMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (anchorWallet) {\n        const balance = await props.connection.getBalance(anchorWallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [anchorWallet, props.connection]);\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [anchorWallet, props.candyMachineId, props.connection, isEnded, isPresale, refreshCandyMachineState]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(MainContainer, {\n      children: [/*#__PURE__*/_jsxDEV(WalletContainer, {\n        children: wallet.connected ? \"Wallet Connected successfully\" : \"Please connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {\n        children: /*#__PURE__*/_jsxDEV(WalletContainer, {\n          children: [/*#__PURE__*/_jsxDEV(Menu, {\n            children: wallet.connected && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progressbar-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"progressbar-complete\",\n                  style: {\n                    width: `${100 - itemsRemaining * 100 / itemsAvailable}%`\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"progressbar-liquid\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 714,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 706,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"progress\",\n                  children: [\"TOTAL MINTED : \", itemsRedeemed, \" / \", itemsAvailable]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 716,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 705,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 704,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Wallet, {\n            children: wallet.connected ? /*#__PURE__*/_jsxDEV(WalletAmount, {\n              children: [(balance || 0).toLocaleString(), \" SOL\", /*#__PURE__*/_jsxDEV(ConnectButton, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 727,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(ConnectButton, {\n              children: \"Connect Wallet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 730,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 9\n      }, this), wallet.connected && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 30\n      }, this), wallet.connected && /*#__PURE__*/_jsxDEV(MintContainer, {\n        children: /*#__PURE__*/_jsxDEV(DesContainer, {\n          children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n            open: alertState.open,\n            autoHideDuration: 1000,\n            onClose: () => setAlertState({ ...alertState,\n              open: false\n            }),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"alertdiv\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"alertmsg\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"alerttext\",\n                  children: [\" \", alertState.message, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 748,\n                    columnNumber: 44\n                  }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"lnk\",\n                    children: wallet && isActive && solanaExplorerLink && /*#__PURE__*/_jsxDEV(SolExplorerLink, {\n                      href: solanaExplorerLink,\n                      target: \"_blank\",\n                      children: \"View on Solscan\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 751,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 749,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 746,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 745,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 744,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 739,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(NFT, {\n            elevation: 3,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Total Minted \", itemsRedeemed, \" / \", itemsAvailable]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 764,\n              columnNumber: 17\n            }, this), wallet && isActive && whitelistEnabled && whitelistTokenBalance > 0 && /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"This Wallet is alloted \", whitelistTokenBalance, \" Mint\", \" \", whitelistTokenBalance > 1 ? \"Tokens\" : \"Token\", \".\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 771,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Price, {\n                label: isActive && whitelistEnabled && whitelistTokenBalance > 0 ? \"WhiteList Mint Price :\" + whitelistPrice + \" \" + priceLabel : \"Mint Price :\" + price + \" \" + priceLabel\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 777,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 776,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 788,\n              columnNumber: 17\n            }, this), wallet && isActive && whitelistEnabled && whitelistTokenBalance > 0 && !isBurnToken && /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"You are whitelisted and allowed to mint.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 794,\n              columnNumber: 21\n            }, this), wallet && isActive && endDate && Date.now() < endDate.getTime() && /*#__PURE__*/_jsxDEV(Countdown, {\n              date: toDate(candyMachine === null || candyMachine === void 0 ? void 0 : (_candyMachine$state = candyMachine.state) === null || _candyMachine$state === void 0 ? void 0 : (_candyMachine$state$e = _candyMachine$state.endSettings) === null || _candyMachine$state$e === void 0 ? void 0 : _candyMachine$state$e.number),\n              onMount: ({\n                completed\n              }) => completed && setIsEnded(true),\n              onComplete: () => {\n                setIsEnded(true);\n              },\n              renderer: renderEndDateCounter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 800,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(MintButtonContainer, {\n              children: !isActive && !isEnded && (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.goLiveDate) && (!isWLOnly || whitelistTokenBalance > 0) ? /*#__PURE__*/_jsxDEV(Countdown, {\n                date: toDate(candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.goLiveDate),\n                onMount: ({\n                  completed\n                }) => completed && setIsActive(!isEnded),\n                onComplete: () => {\n                  setIsActive(!isEnded);\n                },\n                renderer: renderGoLiveDateCounter\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 814,\n                columnNumber: 21\n              }, this) : !wallet ? /*#__PURE__*/_jsxDEV(ConnectButton, {\n                children: \"Connect Wallet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 825,\n                columnNumber: 21\n              }, this) : !isWLOnly || whitelistTokenBalance > 0 ? (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.gatekeeper) && wallet.publicKey && wallet.signTransaction ? /*#__PURE__*/_jsxDEV(GatewayProvider, {\n                wallet: {\n                  publicKey: wallet.publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\n                  //@ts-ignore\n                  signTransaction: wallet.signTransaction\n                } // // Replace with following when added\n                // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\n                ,\n                gatekeeperNetwork: candyMachine === null || candyMachine === void 0 ? void 0 : (_candyMachine$state2 = candyMachine.state) === null || _candyMachine$state2 === void 0 ? void 0 : (_candyMachine$state2$ = _candyMachine$state2.gatekeeper) === null || _candyMachine$state2$ === void 0 ? void 0 : _candyMachine$state2$.gatekeeperNetwork // This is the ignite (captcha) network\n                /// Don't need this for mainnet\n                ,\n                clusterUrl: rpcUrl,\n                cluster: cluster,\n                options: {\n                  autoShowModal: false\n                },\n                children: /*#__PURE__*/_jsxDEV(MintButton, {\n                  candyMachine: candyMachine,\n                  isMinting: isMinting,\n                  isActive: isActive,\n                  isEnded: isEnded,\n                  isSoldOut: isSoldOut,\n                  onMint: onMint\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 848,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 830,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(MintButton, {\n                candyMachine: candyMachine,\n                isMinting: isMinting,\n                isActive: isActive,\n                isEnded: isEnded,\n                isSoldOut: isSoldOut,\n                onMint: onMint\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 858,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Mint is private.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 868,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 809,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\" Balance:  \" + (balance || 0).toLocaleString(), \" SOL\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 871,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 877,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 763,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 737,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 692,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"2c8gw+EbkWrDDSZY62MrX0LZOV4=\", false, function () {\n  return [useWallet];\n});\n\n_c15 = Home;\nexport default Home;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15;\n\n$RefreshReg$(_c, \"WalletContainer\");\n$RefreshReg$(_c2, \"Logo\");\n$RefreshReg$(_c3, \"WalletAmount\");\n$RefreshReg$(_c4, \"Wallet\");\n$RefreshReg$(_c5, \"ConnectButton\");\n$RefreshReg$(_c6, \"NFT\");\n$RefreshReg$(_c7, \"Card\");\n$RefreshReg$(_c8, \"MintButtonContainer\");\n$RefreshReg$(_c9, \"Menu\");\n$RefreshReg$(_c10, \"SolExplorerLink\");\n$RefreshReg$(_c11, \"MainContainer\");\n$RefreshReg$(_c12, \"MintContainer\");\n$RefreshReg$(_c13, \"DesContainer\");\n$RefreshReg$(_c14, \"Price\");\n$RefreshReg$(_c15, \"Home\");","map":{"version":3,"sources":["D:/GitHub/NFT-mint-UI/src/Home.tsx"],"names":["useCallback","useEffect","useMemo","useState","styled","confetti","anchor","Connection","PublicKey","LAMPORTS_PER_SOL","useWallet","WalletMultiButton","GatewayProvider","Countdown","Snackbar","Paper","Chip","getAtaForMint","toDate","MintButton","awaitTransactionSignatureConfirmation","CANDY_MACHINE_PROGRAM","createAccountsForMint","getCandyMachineState","getCollectionPDA","mintOneToken","cluster","process","env","REACT_APP_SOLANA_NETWORK","toString","decimals","REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS","splTokenName","REACT_APP_SPL_TOKEN_TO_MINT_NAME","WalletContainer","div","Logo","WalletAmount","Wallet","ul","ConnectButton","NFT","Card","MintButtonContainer","Menu","SolExplorerLink","a","MainContainer","MintContainer","DesContainer","Price","Home","props","balance","setBalance","isMinting","setIsMinting","isActive","setIsActive","solanaExplorerLink","setSolanaExplorerLink","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","itemsRemaining","setItemsRemaining","isSoldOut","setIsSoldOut","payWithSplToken","setPayWithSplToken","price","setPrice","priceLabel","setPriceLabel","whitelistPrice","setWhitelistPrice","whitelistEnabled","setWhitelistEnabled","isBurnToken","setIsBurnToken","whitelistTokenBalance","setWhitelistTokenBalance","isEnded","setIsEnded","endDate","setEndDate","isPresale","setIsPresale","isWLOnly","setIsWLOnly","alertState","setAlertState","open","message","severity","undefined","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","wallet","candyMachine","setCandyMachine","rpcUrl","rpcHost","solFeesEstimation","anchorWallet","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","commitment","connection","candyMachineId","cndy","state","divider","Array","join","slice","tokenMint","toNumber","whitelistMintSettings","mode","burnEveryTime","presale","discountPrice","tokenBalance","getTokenAccountBalance","mint","value","uiAmount","e","console","error","endSettings","endSettingType","date","number","Date","getTime","amount","limit","Math","min","collectionPDA","collectionPDAAccount","getAccountInfo","txnEstimate","retainAuthority","gatekeeper","expireOnUse","Error","hideDuration","startsWith","log","renderGoLiveDateCounter","days","hours","minutes","seconds","renderEndDateCounter","label","displaySuccess","mintPublicKey","qty","remaining","throwConfetti","particleCount","spread","origin","y","onMint","beforeTransactions","afterTransactions","connected","program","setupMint","status","err","transaction","txTimeout","setupState","web3","Keypair","generate","mintResult","metadataStatus","mintTxId","provider","metadataKey","msg","indexOf","code","getBalance","width","toLocaleString","now","completed","goLiveDate","gatekeeperNetwork","autoShowModal"],"mappings":";;;AAAA,SAAQA,WAAR,EAAqBC,SAArB,EAAgCC,OAAhC,EAAyCC,QAAzC,QAAwD,OAAxD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,SAEIC,UAFJ,EAGIC,SAHJ,EAKIC,gBALJ,QAMO,iBANP;AAQA,SAAQC,SAAR,QAAwB,8BAAxB;AACA,SAAQC,iBAAR,QAAgC,iCAAhC;AACA,SAAQC,eAAR,QAA8B,6BAA9B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,QAAT,EAAmBC,KAAnB,EAA0BC,IAA1B,QAAsC,mBAAtC;AACA,SAAqBC,aAArB,EAAoCC,MAApC,QAAkD,SAAlD;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SACEC,qCADF,EAEEC,qBAFF,EAIEC,qBAJF,EAKEC,oBALF,EAMEC,gBANF,EAQEC,YARF,QAUO,iBAVP;;AAYA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,wBAAZ,CAAsCC,QAAtC,EAAhB;AACA,MAAMC,QAAQ,GAAGJ,OAAO,CAACC,GAAR,CAAYI,oCAAZ,GACb,CAACL,OAAO,CAACC,GAAR,CAAYI,oCAAZ,CAAkDF,QAAlD,EADY,GAEb,CAFJ;AAGA,MAAMG,YAAY,GAAGN,OAAO,CAACC,GAAR,CAAYM,gCAAZ,GACjBP,OAAO,CAACC,GAAR,CAAYM,gCAAZ,CAA6CJ,QAA7C,EADiB,GAEjB,OAFJ;AAIA,MAAMK,eAAe,GAAG/B,MAAM,CAACgC,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;KAAMD,e;AAUN,MAAME,IAAI,GAAGjC,MAAM,CAACgC,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBA;MAAMC,I;AAoBN,MAAMC,YAAY,GAAGlC,MAAM,CAACgC,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3BA;MAAME,Y;AA6BN,MAAMC,MAAM,GAAGnC,MAAM,CAACoC,EAAG;AACzB;AACA;AACA;AACA;AACA;AACA,CANA;MAAMD,M;AAQN,MAAME,aAAa,GAAGrC,MAAM,CAACO,iBAAD,CAAoB;AAChD;AACA;AACA;AACA;AACA,CALA;MAAM8B,a;AAON,MAAMC,GAAG,GAAGtC,MAAM,CAACW,KAAD,CAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;MAAM2B,G;AAUN,MAAMC,IAAI,GAAGvC,MAAM,CAACW,KAAD,CAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;MAAM4B,I;AAWN,MAAMC,mBAAmB,GAAGxC,MAAM,CAACgC,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAzBA;MAAMQ,mB;AA2BN,MAAMC,IAAI,GAAGzC,MAAM,CAACoC,EAAG;AACvB;AACA;AACA;AACA;AACA,CALA;MAAMK,I;AAMN,MAAMC,eAAe,GAAG1C,MAAM,CAAC2C,CAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;OAAMD,e;AAgBN,MAAME,aAAa,GAAG5C,MAAM,CAACgC,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;OAAMY,a;AAQN,MAAMC,aAAa,GAAG7C,MAAM,CAACgC,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;OAAMa,a;AASN,MAAMC,YAAY,GAAG9C,MAAM,CAACgC,GAAI;AAChC;AACA;AACA;AACA;AACA,CALA;OAAMc,Y;AAON,MAAMC,KAAK,GAAG/C,MAAM,CAACY,IAAD,CAAO;AAC3B;AACA;AACA;AACA;AACA;AACA,CANA;OAAMmC,K;;AAgBN,M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","sourcesContent":["import {useCallback, useEffect, useMemo, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport confetti from \"canvas-confetti\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport {\r\n    Commitment,\r\n    Connection,\r\n    PublicKey,\r\n    Transaction,\r\n    LAMPORTS_PER_SOL\r\n} from \"@solana/web3.js\";\r\nimport {WalletAdapterNetwork} from '@solana/wallet-adapter-base';\r\nimport {useWallet} from \"@solana/wallet-adapter-react\";\r\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\r\nimport {GatewayProvider} from '@civic/solana-gateway-react';\r\nimport Countdown from \"react-countdown\";\r\nimport { Snackbar, Paper, Chip } from \"@material-ui/core\";\r\nimport { AlertState, getAtaForMint, toDate } from \"./utils\";\r\nimport { MintButton } from \"./MintButton\";\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CANDY_MACHINE_PROGRAM,\r\n  CandyMachineAccount,\r\n  createAccountsForMint,\r\n  getCandyMachineState,\r\n  getCollectionPDA,\r\n  shortenAddress,\r\n  mintOneToken,\r\n  SetupState,\r\n} from \"./candy-machine\";\r\n\r\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\r\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS\r\n  ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS!.toString()\r\n  : 9;\r\nconst splTokenName = process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME\r\n  ? process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME.toString()\r\n  : \"TOKEN\";\r\n\r\nconst WalletContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  background: black;\r\n  padding: 0.6em;\r\n  background: #0c0c22bf;\r\n  z-index: 1;\r\n`;\r\nconst Logo = styled.div`\r\n  padding\r\n  display: flex;\r\n  -webkit-flex-direction: row;\r\n  -ms-flex-direction: row;\r\n  flex-direction: row;\r\n  -webkit-flex-wrap: wrap;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  -webkit-box-pack: center;\r\n  -webkit-justify-content: center;\r\n  -ms-flex-pack: center;\r\n  justify-content: space-between !important;\r\n\r\n  overflow: hidden;\r\n  position: fixed;\r\n  bottom: 0;\r\n  width: 100%;\r\n  z-index:1;\r\n`;\r\nconst WalletAmount = styled.div`\r\n  color: black;\r\n  width: auto;\r\n  padding: 5px 5px 5px 16px;\r\n  min-width: 48px;\r\n  min-height: auto;\r\n  border-radius: 44px;\r\n  background-color: var(--main-text-color);\r\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%),\r\n    0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\r\n  box-sizing: border-box;\r\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\r\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\r\n    border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n  font-weight: 500;\r\n  line-height: 1.75;\r\n  text-transform: uppercase;\r\n  border: 0;\r\n  margin: 0;\r\n  display: inline-flex;\r\n  outline: 0;\r\n  position: relative;\r\n  align-items: center;\r\n  user-select: none;\r\n  vertical-align: middle;\r\n  justify-content: flex-start;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Wallet = styled.ul`\r\n  flex: 0 0 auto;\r\n  padding: 0;\r\n  margin-right: 3.5em !important;\r\n  margin: 0px;\r\n  justify-content: right;\r\n`;\r\n\r\nconst ConnectButton = styled(WalletMultiButton)`\r\n  border-radius: 44px !important;\r\n  padding: 6px 16px;\r\n  background-color: #00b7fc;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst NFT = styled(Paper)`\r\n  min-width: 32em !important;\r\n  margin: 0 auto;\r\n  padding: 5px 20px 20px 20px;\r\n  flex: 1 1 auto;\r\n  background-color: var(--card-background-color) !important;\r\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22) !important;\r\n  margin-top: 6em;\r\n`;\r\n\r\nconst Card = styled(Paper)`\r\n  display: inline-block;\r\n  background-color: var(--countdown-background-color) !important;\r\n  margin: 5px;\r\n  min-width: 40px;\r\n  padding: 24px;\r\n  h1 {\r\n    margin: 0px;\r\n  }\r\n`;\r\n\r\nconst MintButtonContainer = styled.div`\r\n  button.MuiButton-contained:not(.MuiButton-containedPrimary) {\r\n    color: #fff;\r\n    border-radius: 44px;\r\n    width: 250px;\r\n  }\r\n\r\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\r\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\r\n    -webkit-animation: pulse 1s;\r\n    animation: pulse 1s;\r\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\r\n  }\r\n\r\n  @-webkit-keyframes pulse {\r\n    0% {\r\n      box-shadow: 0 0 0 0 #ef8f6e;\r\n    }\r\n  }\r\n\r\n  @keyframes pulse {\r\n    0% {\r\n      box-shadow: 0 0 0 0 #ef8f6e;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Menu = styled.ul`\r\n  list-style: none;\r\n  display: relative;\r\n  flex: 1 0 auto;\r\n  margin: 0px;\r\n`;\r\nconst SolExplorerLink = styled.a`\r\n  color: var(--title-text-color);\r\n  border-bottom: 1px solid var(--title-text-color);\r\n  font-weight: bold;\r\n  list-style-image: none;\r\n  list-style-position: outside;\r\n  list-style-type: none;\r\n  outline: none;\r\n  text-decoration: none;\r\n  text-size-adjust: 100%;\r\n\r\n  :hover {\r\n    border-bottom: 2px solid var(--title-text-color);\r\n  }\r\n`;\r\n\r\nconst MainContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 20px;\r\n\r\n  text-align: center;\r\n  justify-content: center;\r\n`;\r\nconst MintContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex: 1 1 auto;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  z-index: 1;\r\n`;\r\n\r\nconst DesContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1 1 auto;\r\n  gap: 20px;\r\n`;\r\n\r\nconst Price = styled(Chip)`\r\n  position: absolute;\r\n  margin: 5px;\r\n  font-weight: bold;\r\n  font-size: 1.2em !important;\r\n  font-family: \"Patrick Hand\", cursive !important;\r\n`;\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n  network: WalletAdapterNetwork;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [balance, setBalance] = useState<number>();\r\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n  const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\r\n  const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\r\n  const [itemsAvailable, setItemsAvailable] = useState(0);\r\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\r\n  const [itemsRemaining, setItemsRemaining] = useState(0);\r\n  const [isSoldOut, setIsSoldOut] = useState(false);\r\n  const [payWithSplToken, setPayWithSplToken] = useState(false);\r\n  const [price, setPrice] = useState(0);\r\n  const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\r\n  const [whitelistPrice, setWhitelistPrice] = useState(0);\r\n  const [whitelistEnabled, setWhitelistEnabled] = useState(false);\r\n  const [isBurnToken, setIsBurnToken] = useState(false);\r\n  const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\r\n  const [isEnded, setIsEnded] = useState(false);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [isWLOnly, setIsWLOnly] = useState(false);\r\n\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n\r\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\r\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\r\n\r\n  const wallet = useWallet();\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n  const solFeesEstimation = 0.012; // approx of account creation fees\r\n\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const refreshCandyMachineState = useCallback(\r\n    async (commitment: Commitment = \"confirmed\") => {\r\n      if (!anchorWallet) {\r\n        return;\r\n      }\r\n\r\n      const connection = new Connection(props.rpcHost, commitment);\r\n\r\n      if (props.candyMachineId) {\r\n        try {\r\n          const cndy = await getCandyMachineState(\r\n            anchorWallet,\r\n            props.candyMachineId,\r\n            connection\r\n          );\r\n\r\n          setCandyMachine(cndy);\r\n          setItemsAvailable(cndy.state.itemsAvailable);\r\n          setItemsRemaining(cndy.state.itemsRemaining);\r\n          setItemsRedeemed(cndy.state.itemsRedeemed);\r\n\r\n          var divider = 1;\r\n          if (decimals) {\r\n            divider = +(\"1\" + new Array(decimals).join(\"0\").slice() + \"0\");\r\n          }\r\n\r\n          // detect if using spl-token to mint\r\n          if (cndy.state.tokenMint) {\r\n            setPayWithSplToken(true);\r\n            // Customize your SPL-TOKEN Label HERE\r\n            // TODO: get spl-token metadata name\r\n            setPriceLabel(splTokenName);\r\n            setPrice(cndy.state.price.toNumber() / divider);\r\n            setWhitelistPrice(cndy.state.price.toNumber() / divider);\r\n          } else {\r\n            setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\r\n            setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\r\n          }\r\n\r\n          // fetch whitelist token balance\r\n          if (cndy.state.whitelistMintSettings) {\r\n            setWhitelistEnabled(true);\r\n            setIsBurnToken(cndy.state.whitelistMintSettings.mode.burnEveryTime);\r\n            setIsPresale(cndy.state.whitelistMintSettings.presale);\r\n            setIsWLOnly(\r\n              !isPresale &&\r\n                cndy.state.whitelistMintSettings.discountPrice === null\r\n            );\r\n\r\n            if (\r\n              cndy.state.whitelistMintSettings.discountPrice !== null &&\r\n              cndy.state.whitelistMintSettings.discountPrice !==\r\n                cndy.state.price\r\n            ) {\r\n              if (cndy.state.tokenMint) {\r\n                setWhitelistPrice(\r\n                  cndy.state.whitelistMintSettings.discountPrice?.toNumber() /\r\n                    divider\r\n                );\r\n              } else {\r\n                setWhitelistPrice(\r\n                  cndy.state.whitelistMintSettings.discountPrice?.toNumber() /\r\n                    LAMPORTS_PER_SOL\r\n                );\r\n              }\r\n            }\r\n\r\n            let balance = 0;\r\n            try {\r\n              const tokenBalance =\r\n                await props.connection.getTokenAccountBalance(\r\n                  (\r\n                    await getAtaForMint(\r\n                      cndy.state.whitelistMintSettings.mint,\r\n                      anchorWallet.publicKey\r\n                    )\r\n                  )[0]\r\n                );\r\n\r\n              balance = tokenBalance?.value?.uiAmount || 0;\r\n            } catch (e) {\r\n              console.error(e);\r\n              balance = 0;\r\n            }\r\n            if (commitment !== \"processed\") {\r\n              setWhitelistTokenBalance(balance);\r\n            }\r\n            setIsActive(isPresale && !isEnded && balance > 0);\r\n          } else {\r\n            setWhitelistEnabled(false);\r\n          }\r\n\r\n          // end the mint when date is reached\r\n          if (cndy?.state.endSettings?.endSettingType.date) {\r\n            setEndDate(toDate(cndy.state.endSettings.number));\r\n            if (\r\n              cndy.state.endSettings.number.toNumber() <\r\n              new Date().getTime() / 1000\r\n            ) {\r\n              setIsEnded(true);\r\n              setIsActive(false);\r\n            }\r\n          }\r\n          // end the mint when amount is reached\r\n          if (cndy?.state.endSettings?.endSettingType.amount) {\r\n            let limit = Math.min(\r\n              cndy.state.endSettings.number.toNumber(),\r\n              cndy.state.itemsAvailable\r\n            );\r\n            setItemsAvailable(limit);\r\n            if (cndy.state.itemsRedeemed < limit) {\r\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n            } else {\r\n              setItemsRemaining(0);\r\n              cndy.state.isSoldOut = true;\r\n              setIsEnded(true);\r\n            }\r\n          } else {\r\n            setItemsRemaining(cndy.state.itemsRemaining);\r\n          }\r\n\r\n          if (cndy.state.isSoldOut) {\r\n            setIsActive(false);\r\n          }\r\n\r\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\r\n          const collectionPDAAccount = await connection.getAccountInfo(\r\n            collectionPDA\r\n          );\r\n\r\n          const txnEstimate =\r\n            892 +\r\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\r\n            (cndy.state.tokenMint ? 66 : 0) +\r\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\r\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\r\n            (cndy.state.gatekeeper ? 33 : 0) +\r\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\r\n\r\n          setNeedTxnSplit(txnEstimate > 1230);\r\n        } catch (e) {\r\n          if (e instanceof Error) {\r\n            if (\r\n              e.message === `Account does not exist ${props.candyMachineId}`\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            } else if (\r\n              e.message.startsWith(\"failed to get info about account\")\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            }\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: `${e}`,\r\n              severity: \"error\",\r\n              hideDuration: null,\r\n            });\r\n          }\r\n          console.log(e);\r\n        }\r\n      } else {\r\n        setAlertState({\r\n          open: true,\r\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\r\n          severity: \"error\",\r\n          hideDuration: null,\r\n        });\r\n      }\r\n    },\r\n    [\r\n      anchorWallet,\r\n      props.candyMachineId,\r\n      props.rpcHost,\r\n      isEnded,\r\n      isPresale,\r\n      props.connection,\r\n    ]\r\n  );\r\n\r\n  const renderGoLiveDateCounter = ({ days, hours, minutes, seconds }: any) => {\r\n    return (\r\n      <div>\r\n        <Card elevation={1}>\r\n          <h1>{days}</h1>Days\r\n        </Card>\r\n        <Card elevation={1}>\r\n          <h1>{hours}</h1>\r\n          Hours\r\n        </Card>\r\n        <Card elevation={1}>\r\n          <h1>{minutes}</h1>Mins\r\n        </Card>\r\n        <Card elevation={1}>\r\n          <h1>{seconds}</h1>Secs\r\n        </Card>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderEndDateCounter = ({ days, hours, minutes }: any) => {\r\n    let label = \"\";\r\n    if (days > 0) {\r\n      label += days + \" days \";\r\n    }\r\n    if (hours > 0) {\r\n      label += hours + \" hours \";\r\n    }\r\n    label += minutes + 1 + \" minutes left to MINT.\";\r\n    return (\r\n      <div>\r\n        <h3>{label}</h3>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  function displaySuccess(mintPublicKey: any, qty: number = 1): void {\r\n    let remaining = itemsRemaining - qty;\r\n    setItemsRemaining(remaining);\r\n    setIsSoldOut(remaining === 0);\r\n    if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\r\n      let balance = whitelistTokenBalance - qty;\r\n      setWhitelistTokenBalance(balance);\r\n      setIsActive(isPresale && !isEnded && balance > 0);\r\n    }\r\n    setSetupTxn(undefined);\r\n    setItemsRedeemed(itemsRedeemed + qty);\r\n    if (!payWithSplToken && balance && balance > 0) {\r\n      setBalance(\r\n        balance -\r\n          (whitelistEnabled ? whitelistPrice : price) * qty -\r\n          solFeesEstimation\r\n      );\r\n    }\r\n    setSolanaExplorerLink(\r\n      cluster === \"devnet\" || cluster === \"testnet\"\r\n        ? \"https://solscan.io/token/\" + mintPublicKey + \"?cluster=\" + cluster\r\n        : \"https://solscan.io/token/\" + mintPublicKey\r\n    );\r\n    setIsMinting(false);\r\n    throwConfetti();\r\n  }\r\n\r\n  function throwConfetti(): void {\r\n    confetti({\r\n      particleCount: 400,\r\n      spread: 70,\r\n      origin: { y: 0.6 },\r\n    });\r\n  }\r\n\r\n  const onMint = async (\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = []\r\n  ) => {\r\n    try {\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        setIsMinting(true);\r\n        let setupMint: SetupState | undefined;\r\n        if (needTxnSplit && setupTxn === undefined) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Please validate account setup transaction\",\r\n            severity: \"info\",\r\n          });\r\n          setupMint = await createAccountsForMint(\r\n            candyMachine,\r\n            wallet.publicKey\r\n          );\r\n          let status: any = { err: true };\r\n          if (setupMint.transaction) {\r\n            status = await awaitTransactionSignatureConfirmation(\r\n              setupMint.transaction,\r\n              props.txTimeout,\r\n              props.connection,\r\n              true\r\n            );\r\n          }\r\n          if (status && !status.err) {\r\n            setSetupTxn(setupMint);\r\n            setAlertState({\r\n              open: true,\r\n              message:\r\n                \"Setup transaction succeeded! You can now validate mint transaction\",\r\n              severity: \"info\",\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: \"Mint failed! Please try again!\",\r\n              severity: \"error\",\r\n            });\r\n            return;\r\n          }\r\n        }\r\n\r\n        const setupState = setupMint ?? setupTxn;\r\n        const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\r\n        let mintResult = await mintOneToken(\r\n          candyMachine,\r\n          wallet.publicKey,\r\n          mint,\r\n          beforeTransactions,\r\n          afterTransactions,\r\n          setupState\r\n        );\r\n\r\n        let status: any = { err: true };\r\n        let metadataStatus = null;\r\n        if (mintResult) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintResult.mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true\r\n          );\r\n\r\n          metadataStatus =\r\n            await candyMachine.program.provider.connection.getAccountInfo(\r\n              mintResult.metadataKey,\r\n              \"processed\"\r\n            );\r\n          console.log(\"Metadata status: \", !!metadataStatus);\r\n        }\r\n\r\n        if (status && !status.err && metadataStatus) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n          });\r\n\r\n          // update front-end amounts\r\n          displaySuccess(mint.publicKey);\r\n          refreshCandyMachineState(\"processed\");\r\n        } else if (status && !status.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message:\r\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\r\n            severity: \"error\",\r\n            hideDuration: 8000,\r\n          });\r\n          refreshCandyMachineState();\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n          refreshCandyMachineState();\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = \"Transaction Timeout! Please try again.\";\r\n        } else if (error.message.indexOf(\"0x138\")) {\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      setIsMinting(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (anchorWallet) {\r\n        const balance = await props.connection.getBalance(\r\n          anchorWallet!.publicKey\r\n        );\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n    })();\r\n  }, [anchorWallet, props.connection]);\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    isEnded,\r\n    isPresale,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  return (\r\n    <main>\r\n      <MainContainer>\r\n        <WalletContainer>\r\n          {wallet.connected\r\n            ? \"Wallet Connected successfully\"\r\n            : \"Please connect your wallet\"}\r\n        </WalletContainer>\r\n        <br />\r\n        <Logo>\r\n          <WalletContainer>\r\n            <Menu>\r\n              {wallet.connected && (\r\n                <div className=\"container\">\r\n                  <div className=\"progressbar-container\">\r\n                    <div\r\n                      className=\"progressbar-complete\"\r\n                      style={{\r\n                        width: `${\r\n                          100 - (itemsRemaining * 100) / itemsAvailable\r\n                        }%`,\r\n                      }}\r\n                    >\r\n                      <div className=\"progressbar-liquid\"></div>\r\n                    </div>\r\n                    <span className=\"progress\">\r\n                      TOTAL MINTED : {itemsRedeemed} / {itemsAvailable}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </Menu>\r\n            <Wallet>\r\n              {wallet.connected ? (\r\n                <WalletAmount>\r\n                  {(balance || 0).toLocaleString()} SOL\r\n                  <ConnectButton />\r\n                </WalletAmount>\r\n              ) : (\r\n                <ConnectButton>Connect Wallet</ConnectButton>\r\n              )}\r\n            </Wallet>\r\n          </WalletContainer>\r\n        </Logo>\r\n        {wallet.connected && <div className=\"overlay\"></div>}\r\n        {wallet.connected && (\r\n          <MintContainer>\r\n            <DesContainer>\r\n              <Snackbar\r\n                open={alertState.open}\r\n                autoHideDuration={1000}\r\n                onClose={() => setAlertState({ ...alertState, open: false })}\r\n              >\r\n                <div className=\"alertdiv\">\r\n                  <div className=\"alertmsg\">\r\n                    <div className=\"alerttext\">\r\n                      {\" \"}\r\n                      {alertState.message} <br />{\" \"}\r\n                      <div className=\"lnk\">\r\n                        {wallet && isActive && solanaExplorerLink && (\r\n                          <SolExplorerLink\r\n                            href={solanaExplorerLink}\r\n                            target=\"_blank\"\r\n                          >\r\n                            View on Solscan\r\n                          </SolExplorerLink>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Snackbar>\r\n              <NFT elevation={3}>\r\n                <h2>\r\n                  Total Minted {itemsRedeemed} / {itemsAvailable}\r\n                </h2>\r\n                {wallet &&\r\n                  isActive &&\r\n                  whitelistEnabled &&\r\n                  whitelistTokenBalance > 0 && (\r\n                    <h3>\r\n                      This Wallet is alloted {whitelistTokenBalance} Mint{\" \"}\r\n                      {whitelistTokenBalance > 1 ? \"Tokens\" : \"Token\"}.\r\n                    </h3>\r\n                  )}\r\n                <div>\r\n                  <Price\r\n                    label={\r\n                      isActive && whitelistEnabled && whitelistTokenBalance > 0\r\n                        ? \"WhiteList Mint Price :\" +\r\n                          whitelistPrice +\r\n                          \" \" +\r\n                          priceLabel\r\n                        : \"Mint Price :\" + price + \" \" + priceLabel\r\n                    }\r\n                  />\r\n                </div>\r\n                <br />\r\n                {wallet &&\r\n                  isActive &&\r\n                  whitelistEnabled &&\r\n                  whitelistTokenBalance > 0 &&\r\n                  !isBurnToken && (\r\n                    <h3>You are whitelisted and allowed to mint.</h3>\r\n                  )}\r\n                {wallet &&\r\n                  isActive &&\r\n                  endDate &&\r\n                  Date.now() < endDate.getTime() && (\r\n                    <Countdown\r\n                      date={toDate(candyMachine?.state?.endSettings?.number)}\r\n                      onMount={({ completed }) => completed && setIsEnded(true)}\r\n                      onComplete={() => {\r\n                        setIsEnded(true);\r\n                      }}\r\n                      renderer={renderEndDateCounter}\r\n                    />\r\n                  )}\r\n                <MintButtonContainer>\r\n                  {!isActive &&\r\n                  !isEnded &&\r\n                  candyMachine?.state.goLiveDate &&\r\n                  (!isWLOnly || whitelistTokenBalance > 0) ? (\r\n                    <Countdown\r\n                      date={toDate(candyMachine?.state.goLiveDate)}\r\n                      onMount={({ completed }) =>\r\n                        completed && setIsActive(!isEnded)\r\n                      }\r\n                      onComplete={() => {\r\n                        setIsActive(!isEnded);\r\n                      }}\r\n                      renderer={renderGoLiveDateCounter}\r\n                    />\r\n                  ) : !wallet ? (\r\n                    <ConnectButton>Connect Wallet</ConnectButton>\r\n                  ) : !isWLOnly || whitelistTokenBalance > 0 ? (\r\n                    candyMachine?.state.gatekeeper &&\r\n                    wallet.publicKey &&\r\n                    wallet.signTransaction ? (\r\n                      <GatewayProvider\r\n                        wallet={{\r\n                          publicKey:\r\n                            wallet.publicKey ||\r\n                            new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                          //@ts-ignore\r\n                          signTransaction: wallet.signTransaction,\r\n                        }}\r\n                        // // Replace with following when added\r\n                        // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\r\n                        gatekeeperNetwork={\r\n                          candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                        } // This is the ignite (captcha) network\r\n                        /// Don't need this for mainnet\r\n                        clusterUrl={rpcUrl}\r\n                        cluster={cluster}\r\n                        options={{ autoShowModal: false }}\r\n                      >\r\n                        <MintButton\r\n                          candyMachine={candyMachine}\r\n                          isMinting={isMinting}\r\n                          isActive={isActive}\r\n                          isEnded={isEnded}\r\n                          isSoldOut={isSoldOut}\r\n                          onMint={onMint}\r\n                        />\r\n                      </GatewayProvider>\r\n                    ) : (\r\n                      <MintButton\r\n                        candyMachine={candyMachine}\r\n                        isMinting={isMinting}\r\n                        isActive={isActive}\r\n                        isEnded={isEnded}\r\n                        isSoldOut={isSoldOut}\r\n                        onMint={onMint}\r\n                      />\r\n                    )\r\n                  ) : (\r\n                    <h1>Mint is private.</h1>\r\n                  )}\r\n                </MintButtonContainer>\r\n                <p>\r\n                  \r\n                  \r\n                  {\" Balance:  \" + (balance || 0).toLocaleString()} SOL\r\n                </p>\r\n\r\n                <br />\r\n              </NFT>\r\n            </DesContainer>\r\n          </MintContainer>\r\n        )}\r\n      </MainContainer>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}